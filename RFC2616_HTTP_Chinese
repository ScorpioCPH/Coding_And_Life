This is a chinese version of RFC2616, which difined the HTTP/1.1

1.2 Terminology 术语:

  Connection: 连接，传输层的虚拟回路，由想要进行通信的两个程序创建。
  Message: 消息，HTTP的基本通信单元，由结构化的字节序列组成，它满足特定的语法，并且通过连接进行传输。
  Request: 请求，或称请求消息。
  Response: 响应，或称响应消息。
  Resource: 资源，通过URI定义的，网络数据对象或者服务，它可以有多种的表现形式（多语言，数据格式，大小，分辨率等）。
  Entity: 实体，作为被传递的信息，是请求或是响应的有效载荷。
          它由两部分组成：存在于实体标题区的“元信息”,以及存在于实体主体区的内容。
  Representation: 表现形式，一个响应包含的实体是由内容协商决定的，有可能存在一个特定的响应状态对应多个表现形式。
  Content Negotiation: 内容协商，一种根据请求来选择表现的机制。
                       每一个响应中的实体表现都可以被协商，包括错误响应。
  Variant: 变体，在任何时刻，一个资源都有可能存在一个或是多个连接到它上面的表现。
           每一个这种表现，都是一个“变体”，使用变体这个概念，并不一定意味着，资源就是内容协商的主题。
  Client: 客户端，一个程序，通过建立连接来完成发送请求的目的。
  User Agent: 用户代理，发起请求的客户端。通常是浏览器，编辑器，网络爬虫，或是终端用户工具。
  Server: 服务器，一个应用程序，可以接受客户端的连接请求，并通过向客户端发送响应来处理请求。
          任何程序，都有可能成为客户端或者服务器。
          我们用这些概念（客户端、服务器）来表明特定连接中，应用程序所扮演的角色，而不是应用程序通常的功能。
          同样的，根据不同请求的性质，任何服务器都可以通过切换它们的行为，来作为源服务器，代理服务器，网关，或是管道等角色。
  Origin Server: 源服务器，存储或创建资源的服务器。
  Proxy: 代理，一个中间程序，既充当服务器，也作为客户端，为了代表其他客户端提出请求。
         请求被内部处理，或者被传递（有可能被翻译）给其他服务器。
         一个代理必须完成服务器和客户端的功能需求。
         透明代理“transparent proxy”需要代理认证和代理识别，它不会修改请求或响应。
         非透明代理“nontransparent proxy”需修改请求或响应，以便为用户代理“user agent”提供附加服务，
         例如组注释服务，媒体类型转换，协议简化，或者匿名过滤等。
         除非被显式地声明，否则，HTTP代理既是透明代理也是非透明代理。
  Gateway: 网关，其实是一个中间服务器，介于其它服务器和客户端之间。
           与代理不同，网关接收请求，仿佛它就是请求资源的源服务器。
           发出请求的客户端可能觉察不到它正在同网关通信。
  Tunnel: 隧道，隧道也是一个中间程序，它在两个连接之间充当盲目中继“blind relay”。
          一旦隧道处于活动状态，它不能被认为是这次HTTP通信的参与者，虽然HTTP请求可能已经把它初始化了。
          当中继连接的两端都关闭的时候，隧道就不再存在。
  Cache: 缓存，缓存是响应消息的本地存储，也是一个子系统，用来控制消息的保存，检索和删除。
         缓存保存了可缓存的响应“cacheable response”，来减少将来相同请求的响应时间和网络带宽消耗。
         任何客户端和服务器都可以有缓存，但缓存不能被充当管道的服务器使用。
  Cacheable: 可缓存的，如果一个响应消息允许缓存程序保存它的副本，用来响应接下来的响应序列，那么可以说这个响应消息是可缓存的。
             如何确定响应消息的可缓存能力在第13章有描述。
             尽管某个资源是可缓存的，但针对特殊的请求，仍然有可能约束缓存来保存这个副本。
  First-Hand: 第一手，如果一个响应消息直接从源服务器获得（可能经过若干代理服务器），没有不必要的延时，
              那么可以说这个响应消息是第一手的。
              如果一个响应消息的有效性直接被源服务器确认，那么也可以说它是第一手的。
  Explicit Expiration Time: 显示过期时间，当这一时间到达后，如果缓存没有对缓存的副本进行重新验证，
                            那么不允许使用此副本区响应后续的请求。
  Heuristic Expiration Time: 启发式过期时间，当没有可用的显示过期时间时，由缓存指定的过期时间。
  Age: 年龄，一个响应消息的年龄，是指从它被源服务器发出，或是被源服务器验证成功地时刻，到现在的时间间隔。
  Freshness Lifetime: 保鲜期，一个响应消息的产生到过期之间的时间间隔。
  Fresh: 新鲜的，如果一个响应消息的年龄没有超过它的保鲜期，那么可以说这个响应消息是新鲜的。
  Stale: 陈旧的，如果一个响应消息的年龄超过了它的保鲜期，那么可以说这个响应消息是陈旧的。
  Semantically Transparent: 语义透明，缓存“cache”可能会以一种语意透明"semantically transparent"的方式工作。
                            这时，对于一个特定的响应，使用缓存既不会对请求客户端产生影响，也不会对源服务器产生影响，
                            缓存的使用只是为了提高性能。
                            当缓存“cache”具有语意透明时，客户端从缓存接收的响应跟直接从源服务器接收的响应完全一致
                            （除了使用hop-by-hop头域）。
  Validator: 验证器，验证期是一个协议元素（例如实体标签"entity tag"，或是最终修改时间），
             用来识别一个缓存里的副本，是否是一个源服务器的实体的等价拷贝。
  Upstream/Downstream: 上游/下游，描述了一个消息的流动：所有的消息都是从上游流向下游。
  Inbound/Outbound: 入站/出站，指明了消息的请求/响应路径，
                    “入站”意味着“流向源服务器”，“出站”意味着“流向客户端user agent”。

1.3. Overall Operation 概述：

  HTTP是一个响应/请求的协议。
  客户端给服务器发送请求消息，格式是这样的，一个请求方法“request method”，加上URI，
  加上协议版本号，然后紧接着一个包含请求修饰符“modifiers”，客户端信息，和可能的消息主体，类似MIME（MIME-like）消息。
  服务器对请求端发送响应消息，格式是这样的，一个状态行“status line”，
  其后跟随一个包含服务器信息、实体元信息和可能的实体主体内容，类似MIME（MIME-like）消息。
  其中状态行“status line”包含消息的协议版本号和一个成功或错误码。
  
  大部分的HTTP通信是由用户代理“user agent”发起的，由应用于一个源服务器资源的请求消息构成。
  最简单的情形，这可以通过用户代理（UA）和源服务器（O）之间的单一连接（v）来实现。
      
      请求链（request chain）------------------------------------------------>
      用户代理（UA）----------------单一连接（v）--------------源服务器（O）
      <----------------------------------------------------------响应链（response chain）
      
  有可能在请求/响应链中出现一个或多个中间者“intermediares”，这是比较复杂的情形。
  常见的中间者“intermediares”有三种：代理（proxy），网关（gateway）和隧道（tunnel）。
  代理（proxy）是一种转发代理“a forwarding agent”，它接收绝对URI“Absoulute ERI”请求，重写全部或部分消息，
  然后把格式化后的请求转发到URI指定的服务器上。
  网关（gateway）是一种接收代理“receiving agent”，它充当某些服务器之上的层，
  必要时它会把请求翻译成为下层服务器的协议。
  隧道（tunnel）不改变消息，而充当两个连接之间的中继点；
  它用于通信需要穿过中间者（如防火墙），甚至当中间者不能理解消息内容的时候。
  
      请求链（request chain）---------------------------------------->
      用户代理（UA）-----v-----A-----v-----B-----v-----C------v-----源服务器（O）
      <----------------------------------------响应链（response chain）
  
  上图显示了用户代理“user agent”和源服务器之间的三个中间者（A，B和C）。
  整条链的请求消息或响应消息，将会通过四个被隔离开的连接（UA---A，A---B，B---C，C---O）。
  这个不同点很重要，因为某些HTTP通信选项有可能只能采用最近的非隧道邻接点的连接，有可能只采用链的端点“end-point”，
  或者也有可能采用于链上所有连接。
  尽管上面的图表是线性的，但每个参与者可能忙于多个并发的通信。
  例如，B可以接收来自不是A的许多客户端的请求，并且/或者可以把请求转发到不是C的服务器，与此同时，C正在处理A的请求。
  
  通信中任何非隧道成员都可能会采用一个内部缓存“internal cache”来处理请求。
  内部缓存的效果是，如果通信链路上的参与者，已经缓存了请求对应的响应，请求/响应链就会大大缩短。
  下图阐明了一个最终请求响应链，假定B拥有一个来自于O（通过C）的响应消息的缓存副本，并且此请求的响应并未被UA或A缓存。

      请求链（request chain）---------->
      UA-----v----------A-----v-----B-----C----O
      <---------响应链 （response chain）
  
  并不是所有的响应都能有效地缓存，一些请求可能含有修饰符“modifiers”，这些修饰符对缓存动作有特殊的要求。
  HTTP对缓存行为和可缓存响应“cacheable responses”的定义在第13章定义。
  
  实际上，目前万维网上有多种被实践和部署的缓存和代理的体系结构和配置。
  这些系统包括节省带宽的缓存代理“proxy cache”层次“hierarchies”系统，
  可以广播“broadcast”或多播“multicast）”缓存数据的系统，
  通过CD-ROM发布缓存数据子集的机构，等等。
  HTTP系统会被应用于宽带连接的企业局域网中的协作，并且可以被用于PDAs进行低耗无线断续连接访问。
  HTTP1.1的宗旨是为了支持各种各样的已经部署的配置，同时引进一种协议结构，让它满足可以建立高可靠性的web应用程序，
  即使不能达到这种要求，也至少可以可靠的定位故障。

  HTTP通信通常发生在TCP/IP连接上。默认端口是TCP 80，不过其它端口也可以使用。
  但并不排除HTTP协议会在其它协议之上被实现。
  HTTP仅仅期望的是一个可靠的传输（译注：HTTP一般建立在传输层协议之上）；
  所以任何提供这种保证的协议都可以被使用；
  协议传输数据单元“transport data unit”与HTTP/1.1请求和响应的消息结构之间的映象已经超出了本规范的范围。
  
  大部分HTTP/1.0 的实现都是对每个请求/响应交换，产生一个新的连接。
  而HTTP/1.1中，一个连接可以用于一个或更多请求/响应交换，虽然连接可能会因为各种原因中断（见第8.1节）。
  
2.Notational Conventions and Generic Grammar 符号约定及基本语法
  
  2.1 Augmented BNF 扩展的巴科斯-诺尔范式
  
  2.2 Basic Rules 基本规则
  
3.Protocol Parameters 协议参数

  3.1 HTTP Version HTTP版本    
      HTTP使用“<主版本>.<次版本>”的编码格式来指明协议版本。
      
  3.2 Uniform Resource Identifiers 统一资源标识符
  
      URI有很多被已知的名字：万维网地址，通用文件标识符，通用资源标识符，以及后来的，统一资源定位符和同意资源名称的组合。
      当提及HTTP时，统一资源标识符是一些简单的格式化的字符串，通过名字，位置或是其他特征，来识别一个资源。
  
      3.2.1 General Syntax 基本语法
      HTTP中的URI可以表现为绝对形式，或是相对形式（基于基本的URI，依赖于上下文使用）。
      这两种形式的不同点在于，绝对URI总是以模式名“scheme”和冒号“：”开始。
      URL语法和语义的限制信息，请参考RFC 2396中的“Uniform Resource Identifiers(URI)：Generic Syntax and Semantics”。
      本文档中的“URI-reference”，“absoluteURI”，“relativeURI”，“port”，“host”，“abs_path”，“rel_path”，“authority”等定义，
      是来自那个文档（RFC 2396）。
      
      对于URI的长度，HTTP并没有任何的事先的限制。
      服务器必须能处理任何它们保存的资源的URI，如果服务器提供了基于GET方法的生成URI的机制，它们应当能处理无限长度的URI。
      如果URI的长度超出了服务器的处理范围，服务器应当返回一个414状态码（请求的URI过长）。
      
        注意：对于长度超过255字节的URI，服务器应当小心，因为某些旧的客户端或是代理，有可能不支持这样的长度。
      
      3.2.2 http URL HTTP的统一资源定位符
      "http"模式(http scheme)通过HTTP协议，来定位网络资源。
      本节定义了“http”这种特殊模式的语法和语义。
      
        http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]
        
      如果没有给定端口，或是空端口，那么就假定是80端口。
      上面的语义是这样的，被标识的资源在这个host服务器上（这个服务器正在监听port端口的TCP连接），
      并且资源的请求URI是绝对路径。
      不管在什么情况下，在URI中，IP地址应当被避免使用（参见RFC1990[24]）。
      当URI中没有绝对路径，那么在使用资源的Request-RUI时，必须给出“/”。
      如果一个代理接收到一个不是全称域名“fully qualified domain name”的主机名，那么它可能补全主机的域名。
      如果一个代理接收到一个全称域名的主机名，那么它不可以改变这个主机名。
      
      3.2.3 URI Comparison URI比较
      
      当比较两个URI是否匹配时，客户端应当遵守区分大小写，按单字节比较的规则，比较整个URI，但有如下例外：
      # 当一个URI引用没有给定端口，或是端口是空值，等价于使用默认端口；
      # 比较主机名时，必须不区分大小写；
      # 比较scheme名时，必须不区分大小写；
      # 一个空的绝对路径，等价于“/”绝对路径；
      
      除了在“reserved”和“unsafe”字符集中的字符，都等价于它们“% HEX HEX”的编码。
      例如，以下的这些URI是等价的：
      
          http://abc.com:80/~smith/home.html
          http://ABC.com/%7Esmith/home.html
          http://ABC.com:/%7esmith/home.html
      
  3.3 Date/Time Formats 日期/时间 格式
    
    3.3.1 Full Date 完整日期
    
    3.3.2 Delta Seconds 
  
  3.4 Character Sets 字符集
  
    3.4.1 Missing Charset 缺失的字符集
    
    
  
  3.5 Content Codings 内容编码
  
  3.6 Transfer Codings 传输编码
  
  3.7 Media Types 媒体类型
  
  3.8 Product Tokens 产品标识
  
  3.9 Quality Values 质量值
  
  3.10 Language Tags 语言标记
  
  3.11 Entity Tags 实体标记
  
  3.12 Range Units 范围单位
  
4. HTTP Message HTTP消息

  4.1 Message Types 消息类型
  
  4.2 Message Headers 消息头
  
  4.3 Message Body 消息体
  
  4.4 Message Length 消息长度
  
  4.5 General Header Fields 普通标题域
  
5. Request 请求

  5.1 Request-Line 请求行
  
  5.2 The Resource Identified by a Request 被请求标识的资源
  
  5.3 Request Header Fields 请求报文头域
  
6. Response 响应

  6.1 Status-Line 状态行
  
  6.2 Response Header Fields 响应报文头域
  
7. Entity 实体

  7.1 Entity Header Fields 实体报文头域
  
  7.2 Entity Body 实体主体
  
8. Connections 连接

  8.1 Persistent Connections 持久连接
  
  8.2 Message Transmission Requirements 消息传输需求
  
9. Method Definitions 方法定义

  9.1 Safe and Idempotent Methods 安全方法和幂等方法
  
  9.2 OPTIONS 可选方法
  
  9.3 GET GET方法
  
  9.4 HEAD 头方法
  
  9.5 POST POST方法
  
  9.6 PUT PUT方法
  
  9.7 DELETE DELETE方法
  
  9.8 TRACE TRACE方法
  
  9.9 CONNECT CONNECT方法
  
10. Status Code Definitions 状态码定义

  10.1 Informational 1xx 信息 1xx 
  
  10.2 Successful 2xx 成功 2xx
  
  10.3 Redirection 3xx 重定向 3xx
  
  10.4 Client Error 4xx 客户端错误 4xx
  
  10.5 Server Error 5xx 服务器端错误 5xx
  
11. Access Authentication 访问许可

12. Content Negotiation 内容协商

  12.1 Server-driven Negotiation 服务器驱动的协商
  
  12.2 Agent-driven Negotiation 客户端驱动的协商
  
  12.3 Transparent Negotiation 透明协商
  
13. Caching in HTTP HTTP中的缓存

  13.2 Expiration Model 过期模型
  
  13.3 Validation Model 验证模型
  
  13.4 Response Cacheability 响应的缓存能力
  
  13.5 Constructing Responses From Caches 从缓存中构建响应
  
  13.6 Caching Negotiated Responses 缓存协商过的响应
  
  13.7 Shared and Non-Shared Caches 共享缓存和非共享缓存
  
  13.8 Errors or Incomplete Response Cache Behavior 错误或是不完整的响应缓存行为
  
  13.9 Side Effects of GET and HEAD GET方法和HEAD方法的副作用
  
  13.10 Invalidation After Updates or Deletions 更新或删除后失效
  
  13.11 Write-Through Mandatory 强制的直接写入
  
  13.12 Cache Replacement 缓存替换
  
  13.13 History Lists 历史列表
  
14. Header Field Definitions 报文头域定义

  14.1 Accept 接受
  
  14.2 Accept-Charset 接受-字符集
  
  14.3 Accept-Encoding 接受-编码
  
  14.4 Accept-Language 接受-语言
  
  14.5 Accept-Ranges 接受-范围
  
  14.6 Age 年龄
  
  14.7 Allow 允许
  
  14.8 Authorization 授权
  
  14.9 Cache-Control 缓存控制
  
    14.9.1 What is Cacheable 什么是可缓存
    
    14.9.2 What May be Stored by Caches 什么可以被缓存保存下来
    
    14.9.3 Modifications of the Basic Expiration Mechanism 基本过期机制的修改
    
    14.9.4 Cache Revalidation and Reload Controls 缓存重新生效，和缓存加载控制
    
    14.9.5 No-Transform Directive 不转换指令
    
    14.9.6 Cache Control Extensions 缓存控制扩展
  
  14.10 Connection 连接
  
  14.11 Content-Encoding 内容-编码
  
  14.12 Content-Language 内容-语言
  
  14.13 Content-Length 内容-长度
  
  14.14 Content-Location 内容-位置
  
  14.15 Content-MD5 内容-MD5加密码
  
  14.16 Content-Range 内容-范围
  
  14.17 Content-Type 内容-类型
  
  14.18 Date 日期
  
    14.18.1 Clockless Origin Server Operation 无节拍的源服务器操作
    
  14.19 ETag Entity-Tag 实体标签
  
  14.20 Expect 期望
  
  14.21 Expires 到期
  
  14.22 From 来源
  
  14.23 Host 主机
  
  14.24 If-Match 是否匹配
  
  14.25 If-Modified-Since 是否从...起被修改
  
  14.26 If-None-Match 是否不匹配
  
  14.27 If-Range 是否在范围内
  
  14.28 If-Unmodified-Since 是否从...起，未被修改
  
  14.29 Last-Modified 最后修改
  
  14.30 Location 位置
  
  14.31 Max-Forwards 最大转发次数
  
  14.32 Pragma 编译指示
  
  14.33 Proxy-Authenticate 代理-认证
  
  14.34 Proxy-Authorization 代理-授权
  
  14.35 Range 范围
    
    14.35.1 Byte Ranges 字节范围
    
    14.35.2 Range Retrieval Requests 范围检索请求
    
  14.36 Referer 参考
  
  14.37 Retry-After 稍后重试
  
  14.38 Server 服务器
  
  14.39 TE Transfer-Extension 转移扩展
  
  14.40 Trailer 追踪者
  
  14.41 Transfer-Encoding 转移-编码
  
  14.42 Upgrade 更新
  
  14.43 User-Agent 用户代理
  
  14.44 Vary 变化
  
  14.45 Via 通过
  
  14.46 Warning 警告
  
  14.47 WWW-Authenticate 万维网-认证
  
15 Security Considerations 安全考虑

  15.1 Personal Information 个人信息
  
    15.1.1 Abuse of Server Log Information 服务器日志的滥用
    
    15.1.2 Transfer of Sensitive Information 敏感信息的转移
    
    15.1.3 Encoding Sensitive Information in URI’s URI中的敏感信息编码
    
    15.1.4 Privacy Issues Connected to Accept Headers 连接到接受报文头的隐私问题
    
  15.2 Attacks Based On File and Path Names 基于文件和路径名的攻击
  
  15.3 DNS Spoofing DNS欺骗
  
  15.4 Location Headers and Spoofing 位置报文头和欺骗
  
  15.5 Content-Disposition Issues 内容处理问题
  
  15.6 Authentication Credentials and Idle Clients 身份验证凭证和空闲的客户
  
  15.7 Proxies and Caching 代理和缓存
  
    15.7.1 Denial of Service Attacks on Proxies 代理上的拒绝服务攻击
    
16. Acknowledgments 致谢

17. References 参考文献

18. Authors’ Addresses 作者地址 

19. Appendices 附录

  19.1 Internet Media Type message/http and application/http 因特网媒体类型： 消息/Http 和 应用程序/Http
  
  19.2 Internet Media Type multipart/byteranges 因特网媒体类型：
  
  19.3 Tolerant Applications 容错应用
  
  19.4 Differences Between HTTP Entities and RFC 2045 Entities HTTP实体和RFC2045实体之间的不同
  
    19.4.1 MIME-Version MIME版本
    
    19.4.2 Conversion to Canonical Form 规范形式的转换
    
    19.4.3 Conversion of Date Formats 日期格式的转换
    
    19.4.4 Introduction of Content-Encoding 内容编码简介
    
    19.4.5 No Content-Transfer-Encoding 不适用内容传输编码
    
    19.4.6 Introduction of Transfer-Encoding 传输编码简介
    
    19.4.7 MHTML and Line Length Limitations MHTML和线长度的限制
    
  19.5 Additional Features 附加的特性
  
  19.6 Compatibility with Previous Versions 
  
  
  
  
  


      
